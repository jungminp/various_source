'''
한 생필품 생산 및 판매하는 회사에서는 판매 실적 점수와 고객 평가 점수를 통해 우수 제품을
선발하고자 한다. 아래와 같이 결과가 나왔을 때, 판매 실적 점수가 일정점수 이상이고
고객 평가 점수가 일정 점수 이상인 제품은 우수 제품이 되고, 두 점수 모두 입력 받은 일정 점수
미만인 제품은 판매중지 목록에 들어가게 된다.
이때, 우수 제품을 출력하고 판매 실적과 품질 평가 점수가 일정한 점수에 도달하지 않는
판매중지 목록를 각각 출력하는 프로그램을 작성하시오.
우수 제품 목록과 판매 중지 목록을 출력할 때는 정렬된 순서로 출력하도록 하시오.

<샘플 예>
제품 명    판매실적   고객의 품질평가
 세제        6             2
 피죤        4             5
 칫솔        3             2
 비누        5             4
 치약        2             1
 샴푸        4             4
 로션        5             3
 유연제      3             5
 생수        8             8
 라면        5             3

<실행 결과>
평가 판매 실적 : 4    <- 입력
품질 평가 기준 : 4    <- 입력
우수 상품으로 선정된 품목 ['피죤', '비누', '샴푸', '생수'] 
판매 중지로 판정된 품목 ['칫솔', '치약']

'''

from productSales_sub import productSales

fp = open('data.txt', 'r')
strList = fp.read().splitlines()
fp.close()

sales_cnt = int(input("평가 판매 실적 : "))
survey_grade = int(input("품질 평가 기준 : "))
gp, bp = productSales(strList, sales_cnt, survey_grade)

    
print("우수 상품으로 선정된 품목", gp)
print("판매 중지로 판정된 품목", bp)



def productSales(productList, sales_cnt, survey_grade):
    
    product_dics = {}   #파일에서 읽은 품목별 판매갯수와 평가점수를 담기 위한 dictionary
                        #품목이 key값으로 쓰이고, 판매갯수와 평가점수를 리트스로 만들어 value가 되도록 함
    
    good_products, bad_products = [], []  #우수 상품 리스트와 판매 중지 리스트
    
    for pro in productList:
        dataList = pro.split('/')  #파일의 한 줄씩을 대상으로 /로 분리하여 리스트로 만든다.
        product_dics[dataList[0]] = (int(dataList[1]), int(dataList[2])) #dataList의 첫번째는 품목이고 두번째와 세번째가 각각 판매실적 및 평가 점수이다.
                
    #품목 갯수만큼 반복하면서 판매 기준과 평가 점수의 기준을 비교하여
    #우수 리스트와 판매 중지 리스트에 추가한다.    
    for key in list(product_dics.keys()):

        if product_dics[key][0] >= sales_cnt and product_dics[key][1] >= survey_grade:
            good_products.append(key)

        elif product_dics[key][0] < sales_cnt and product_dics[key][1] < survey_grade:
            bad_products.append(key)

    good_products = sorted(good_products) #sorted()함수를 이용하여 정렬
    bad_products= sorted(bad_products)    #sorted()함수를 이용하여 정렬
    return good_products, bad_products

